package com.example.legato

import be.tarsos.dsp.*
import be.tarsos.dsp.io.android.AudioDispatcherFactory
import be.tarsos.dsp.io.jvm.AudioPlayer
import be.tarsos.dsp.io.jvm.JVMAudioInputStream
import be.tarsos.dsp.io.jvm.WaveformWriter
import be.tarsos.dsp.resample.RateTransposer
import sun.audio.AudioPlayer
import java.beans.PropertyChangeListener
import java.io.File
import java.io.IOException
import java.lang.reflect.InvocationTargetException


class PitchShiftingExample : JFrame() {
    private val fileChooser: JFileChooser
    private var dispatcher: AudioDispatcher? = null
    private var wsola: WaveformSimilarityBasedOverlapAdd? = null
    private var gain: GainProcessor? = null
    private var audioPlayer: AudioPlayer? = null
    private var rateTransposer: RateTransposer? = null
    private var currentFactor // pitch shift factor
            : Double
    private var sampleRate = 0.0
    private var loop: Boolean
    private val factorSlider: JSlider
    private val factorLabel: JLabel
    private val gainSlider: JSlider
    private val originalTempoCheckBox: JCheckBox
    private val centsSpinner: JSpinner

    private val parameterSettingChangedListener: ChangeListener = object : ChangeListener() {
        override fun stateChanged(arg0: ChangeEvent) {
            if (arg0.getSource() is JSpinner) {
                val centValue: Int = Integer.valueOf((arg0.getSource() as JSpinner)
                        .getValue().toString())
                currentFactor = centToFactor(centValue.toDouble())
                factorSlider.removeChangeListener(this)
                factorSlider.setValue(Math.round(currentFactor * 100).toInt())
                factorSlider.addChangeListener(this)
            } else if (arg0.getSource() is JSlider) {
                currentFactor = factorSlider.getValue() / 100.0
                centsSpinner.removeChangeListener(this)
                centsSpinner.setValue(factorToCents(currentFactor))
                centsSpinner.addChangeListener(this)
            }
            factorLabel.setText("Factor " + Math.round(currentFactor * 100) + "%")
            if (dispatcher != null) {
                if (originalTempoCheckBox.getModel().isSelected()) {
                    wsola!!.setParameters(WaveformSimilarityBasedOverlapAdd.Parameters.musicDefaults(currentFactor, sampleRate))
                } else {
                    wsola!!.setParameters(WaveformSimilarityBasedOverlapAdd.Parameters.musicDefaults(1.0, sampleRate))
                }
                rateTransposer!!.setFactor(currentFactor)
            }
        }
    }
    override fun onSizeChanged() {
        wsola?.setParameters(WaveformSimilarityBasedOverlapAdd.Parameters.musicDefaults(1.2, sampleRate))
    }
    // factor is the tempo change.
    WaveformSimilarityBasedOverlapAdd(WaveformSimilarityBasedOverlapAdd.Parameters.musicDefaults(1.0, sampleRate))
    val stream = AudioInputStream(line)
    val audioStream = JVMAudioInputStream(stream)
    dispatcher = AudioDispatcher(audioStream, wsola!!.inputBufferSize, wsola!!.overlap)
    wsola!!.setDispatcher(dispatcher)
    dispatcher!!.addAudioProcessor(wsola)
    val wsola = WaveformSimilarityBasedOverlapAdd(WaveformSimilarityBasedOverlapAdd.Parameters.musicDefaults(factor, sampleRate))
    val writer = WaveformWriter(format, target)

        val inputFile = File(source)
        val format: javax.sound.sampled.AudioFormat = AudioSystem.getAudioFileFormat(inputFile).getFormat()
        val sampleRate: Double = format.getSampleRate().toDouble()
        val factor = centToFactor(cents)
        val rateTransposer = RateTransposer(factor)  // 重采样
        val wsola = WaveformSimilarityBasedOverlapAdd(WaveformSimilarityBasedOverlapAdd.Parameters.musicDefaults(factor, sampleRate))
        // 反正是改波形的
        val writer = WaveformWriter(format, target)

    val dispatcher: AudioDispatcher
        if (format.getChannels() != 1) {
            dispatcher = AudioDispatcherFactory.fromFile(inputFile, wsola.inputBufferSize * format.getChannels(), wsola.overlap * format.getChannels())
            dispatcher.addAudioProcessor(MultichannelToMono(format.getChannels(), true))
        } else {
            dispatcher = AudioDispatcherFactory.fromFile(inputFile, wsola.inputBufferSize, wsola.overlap)
        }
        wsola.setDispatcher(dispatcher)
        dispatcher.addAudioProcessor(wsola)
        dispatcher.addAudioProcessor(rateTransposer)
        dispatcher.addAudioProcessor(writer)
        dispatcher.run()







    private fun startFile(inputFile: File?, mixer: Mixer?) {
        if (dispatcher != null) {
            dispatcher!!.stop()
        }
        val format: javax.sound.sampled.AudioFormat
        try {
            format = if (inputFile != null) {
                AudioSystem.getAudioFileFormat(inputFile).getFormat()
            } else {
                javax.sound.sampled.AudioFormat(44100, 16, 1, true, true)
            }
            rateTransposer = RateTransposer(currentFactor)
            gain = GainProcessor(1.0)
            audioPlayer = AudioPlayer(format)
            sampleRate = format.getSampleRate().toDouble()

            //can not time travel, unfortunately. It would be nice to go back and kill Hitler or something...
            wsola = if (originalTempoCheckBox.getModel().isSelected() && inputFile != null) {
                WaveformSimilarityBasedOverlapAdd(WaveformSimilarityBasedOverlapAdd.Parameters.musicDefaults(currentFactor, sampleRate))
            } else {
                WaveformSimilarityBasedOverlapAdd(WaveformSimilarityBasedOverlapAdd.Parameters.musicDefaults(1.0, sampleRate))
            }
            if (inputFile == null) {
                val dataLineInfo: javax.sound.sampled.DataLine.Info = javax.sound.sampled.DataLine.Info(TargetDataLine::class.java, format)
                val line: TargetDataLine
                line = mixer.getLine(dataLineInfo) as TargetDataLine
                line.open(format, wsola!!.inputBufferSize)
                line.start()
                val stream = AudioInputStream(line)
                val audioStream = JVMAudioInputStream(stream)
                // create a new dispatcher
                dispatcher = AudioDispatcher(audioStream, wsola!!.inputBufferSize, wsola!!.overlap)
            } else {
                if (format.getChannels() != 1) {
                    dispatcher = AudioDispatcherFactory.fromFile(inputFile, wsola!!.inputBufferSize * format.getChannels(), wsola!!.overlap * format.getChannels())
                    dispatcher!!.addAudioProcessor(MultichannelToMono(format.getChannels(), true))
                } else {
                    dispatcher = AudioDispatcherFactory.fromFile(inputFile, wsola!!.inputBufferSize, wsola!!.overlap)
                }
                //dispatcher = AudioDispatcher.fromFile(inputFile,wsola.getInputBufferSize(),wsola.getOverlap());
            }
            wsola!!.setDispatcher(dispatcher)
            dispatcher!!.addAudioProcessor(wsola)
            dispatcher!!.addAudioProcessor(rateTransposer)
            dispatcher!!.addAudioProcessor(gain)
            dispatcher!!.addAudioProcessor(audioPlayer)
            dispatcher!!.addAudioProcessor(object : AudioProcessor {
                override fun processingFinished() {
                    if (loop) {
                        dispatcher = null
                        startFile(inputFile, null)
                    }
                }

                override fun process(audioEvent: AudioEvent): Boolean {
                    return true
                }
            })
            val t = Thread(dispatcher)
            t.start()
        } catch (e: UnsupportedAudioFileException) {
            // TODO Auto-generated catch block
            e.printStackTrace()
        } catch (e: IOException) {
            // TODO Auto-generated catch block
            e.printStackTrace()
        } catch (e: LineUnavailableException) {
            // TODO Auto-generated catch block
            e.printStackTrace()
        }
    }

    companion object {
        /**
         *
         */
        private const val serialVersionUID = -3830419374132803358L
        fun centToFactor(cents: Double): Double {
            return 1 / Math.pow(Math.E, cents * Math.log(2.0) / 1200 / Math.log(Math.E))
        }

        private fun factorToCents(factor: Double): Double {
            return 1200 * Math.log(1 / factor) / Math.log(2.0)
        }

        @JvmStatic
        fun main(argv: Array<String>) {
            if (argv.size == 3) {
                try {
                    startCli(argv[0], argv[1], argv[2].toDouble())
                } catch (e: NumberFormatException) {
                    printHelp("Please provide a well formatted number for the time stretching factor. See Synopsis.")
                } catch (e: UnsupportedAudioFileException) {
                    printHelp("Unsupported audio file, please check if the input is 16bit 44.1kHz MONO PCM wav.")
                } catch (e: IOException) {
                    printHelp("IO error, could not read from, or write to the audio file, does it exist?")
                }
            } else if (argv.size != 0) {
                printHelp("Please provide exactly 3 arguments, see Synopsis.")
            } else {
                try {
                    startGui()
                } catch (e: InterruptedException) {
                    e.printStackTrace()
                    throw Error(e)
                } catch (e: InvocationTargetException) {
                    e.printStackTrace()
                    throw Error(e)
                }
            }
        }

        @Throws(InterruptedException::class, InvocationTargetException::class)
        private fun startGui() {
            SwingUtilities.invokeAndWait(Runnable {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName())
                } catch (e: Exception) {
                    //ignore failure to set default look en feel;
                }
                val frame: JFrame = PitchShiftingExample()
                frame.pack()
                frame.setSize(400, 450)
                frame.setVisible(true)
            })
        }

        @Throws(UnsupportedAudioFileException::class, IOException::class)
        private fun startCli(source: String, target: String, cents: Double) {
            val inputFile = File(source)
            val format: javax.sound.sampled.AudioFormat = AudioSystem.getAudioFileFormat(inputFile).getFormat()
            val sampleRate: Double = format.getSampleRate().toDouble()
            val factor = centToFactor(cents)
            val rateTransposer = RateTransposer(factor)
            val wsola = WaveformSimilarityBasedOverlapAdd(WaveformSimilarityBasedOverlapAdd.Parameters.musicDefaults(factor, sampleRate))
            val writer = WaveformWriter(format, target)
            val dispatcher: AudioDispatcher
            if (format.getChannels() != 1) {
                dispatcher = AudioDispatcherFactory.fromFile(inputFile, wsola.inputBufferSize * format.getChannels(), wsola.overlap * format.getChannels())
                dispatcher.addAudioProcessor(MultichannelToMono(format.getChannels(), true))
            } else {
                dispatcher = AudioDispatcherFactory.fromFile(inputFile, wsola.inputBufferSize, wsola.overlap)
            }
            wsola.setDispatcher(dispatcher)
            dispatcher.addAudioProcessor(wsola)
            dispatcher.addAudioProcessor(rateTransposer)
            dispatcher.addAudioProcessor(writer)
            dispatcher.run()
        }

        private fun printHelp(error: String) {
            SharedCommandLineUtilities.printPrefix()
            System.err.println("Name:")
            System.err.println("\tTarsosDSP Pitch shifting utility.")
            SharedCommandLineUtilities.printLine()
            System.err.println("Synopsis:")
            System.err.println("\tjava -jar PitchShift.jar source.wav target.wav cents")
            SharedCommandLineUtilities.printLine()
            System.err.println("Description:")
            System.err.println("\tChange the play back speed of audio without changing the pitch.\n")
            System.err.println("\t\tsource.wav\tA readable, mono wav file.")
            System.err.println("\t\ttarget.wav\tTarget location for the pitch shifted file.")
            System.err.println("\t\tcents\t\tPitch shifting in cents: 100 means one semitone up, -100 one down, 0 is no change. 1200 is one octave up.")
            if (!error.isEmpty()) {
                SharedCommandLineUtilities.printLine()
                System.err.println("Error:")
                System.err.println("\t" + error)
            }
        }
    }

    init {
        this.setLayout(BorderLayout())
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)
        this.setTitle("Pitch shifting: change the pitch of your audio.")
        originalTempoCheckBox = JCheckBox("Keep original tempo?", true)
        originalTempoCheckBox.addChangeListener(parameterSettingChangedListener)
        loop = false
        currentFactor = 1.0
        factorSlider = JSlider(20, 250)
        factorSlider.setValue(100)
        factorSlider.setPaintLabels(true)
        factorSlider.addChangeListener(parameterSettingChangedListener)
        val fileChooserPanel = JPanel(BorderLayout())
        fileChooserPanel.setBorder(TitledBorder("1... Or choose your audio (wav mono)"))
        fileChooser = JFileChooser()
        val chooseFileButton = JButton("Choose a file...")
        chooseFileButton.addActionListener(object : java.awt.event.ActionListener() {
            override fun actionPerformed(arg0: ActionEvent) {
                val returnVal: Int = fileChooser.showOpenDialog(this@PitchShiftingExample)
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    val file: File = fileChooser.getSelectedFile()
                    startFile(file, null)
                } else {
                    //canceled
                }
            }
        })
        fileChooserPanel.add(chooseFileButton)
        fileChooser.setLayout(BoxLayout(fileChooser, BoxLayout.PAGE_AXIS))
        val inputSubPanel = JPanel(BorderLayout())
        val inputPanel: JPanel = InputPanel()
        inputPanel.addPropertyChangeListener("mixer",
                PropertyChangeListener { arg0 -> startFile(null, arg0.newValue as Mixer) })
        inputSubPanel.add(inputPanel, BorderLayout.NORTH)
        inputSubPanel.add(fileChooserPanel, BorderLayout.SOUTH)
        gainSlider = JSlider(0, 200)
        gainSlider.setValue(100)
        gainSlider.setPaintLabels(true)
        gainSlider.addChangeListener(object : ChangeListener() {
            override fun stateChanged(arg0: ChangeEvent) {
                if (dispatcher != null) {
                    val gainValue: Double = gainSlider.getValue() / 100.0
                    gain!!.setGain(gainValue)
                }
            }
        })
        val params = JPanel(BorderLayout())
        params.setBorder(TitledBorder("2. Set the algorithm parameters"))
        val loopCheckbox = JCheckBox("Loop sample?")
        loopCheckbox.addActionListener(object : java.awt.event.ActionListener() {
            override fun actionPerformed(e: ActionEvent) {
                loop = (e.getSource() as JCheckBox).isSelected()
            }
        })
        var label = JLabel("Factor 100%")
        label.setToolTipText("The pitch shift factor in % (100 is no change, 50 is double pitch, 200 half).")
        factorLabel = label
        params.add(label, BorderLayout.NORTH)
        params.add(factorSlider, BorderLayout.CENTER)
        val subPanel = JPanel(java.awt.GridLayout(0, 2))
        centsSpinner = JSpinner()
        centsSpinner.addChangeListener(parameterSettingChangedListener)
        label = JLabel("Pitch shift in cents")
        label.setToolTipText("Pitch shift in cents.")
        subPanel.add(label)
        subPanel.add(centsSpinner)
        label = JLabel("Keep original tempo")
        label.setToolTipText("Pitch shift in cents.")
        subPanel.add(label)
        subPanel.add(originalTempoCheckBox)
        label = JLabel("Loop sample?")
        subPanel.add(label)
        subPanel.add(loopCheckbox)
        params.add(subPanel, BorderLayout.SOUTH)
        val gainPanel = JPanel(BorderLayout())
        label = JLabel("Gain (in %)")
        label.setToolTipText("Volume in % (100 is no change).")
        gainPanel.add(label, BorderLayout.NORTH)
        gainPanel.add(gainSlider, BorderLayout.CENTER)
        gainPanel.setBorder(TitledBorder("3. Optionally change the volume"))
        this.add(inputSubPanel, BorderLayout.NORTH)
        this.add(params, BorderLayout.CENTER)
        this.add(gainPanel, BorderLayout.SOUTH)
    }
}